Why it is said that searching a node in a binary search tree 
is efficient than that of a simple binary tree?
------------------------------------------------------------------

In binary search tree the left subtree has elements less than the nodes 
element and the right subtree has elements greater than the nodes element.
Whereas in binary tree there is no ordering in terms of how the nodes are arranged.

If we want to search a node(key), we begin by examining the root node. 
If the tree is null, the key we are searching for does not exist in the tree. 
Otherwise, if the key equals that of the root, the search is successful and 
we return the node. If the key is less than that of the root, we search the 
left subtree. Similarly, if the key is greater than that of the root, we search the right subtree. 
This process is repeated until the key is found or the remaining subtree is null. If the 
searched key is not found after a null subtree is reached, then the key is not present in the tree. 
This is easily expressed as a recursive algorithm. Thus it is said that searching a node in a binary search tree 
is efficient than that of a simple binary tree.